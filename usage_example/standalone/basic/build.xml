<?xml version="1.0"?>

<project name="basic" default="explain" basedir=".">

    <!-- Properties ====================================================== -->
    <!-- Global -->
    <property name="src.dir"              location="${basedir}/src" />
    <property name="lib.dir"              location="${basedir}/lib" />
    <property name="macker.jar.file"      location="${basedir}/lib/macker.jar" />
    <property name="macker.rules.path"    location="${basedir}/conf/quality/macker" />
    <property name="macker.rules.file"    location="${macker.rules.path}/macker-rules.xml" />
    <property name="macker.rules.filepath" location="${macker.rules.path}/${macker.rules.file}" />

    <property name="build.dir"            location="${basedir}/build/${ant.project.name}" />
    <property name="build.classes.dir"    location="${build.dir}/classes" />

    <property name="macker.report.dir"    location="${build.dir}/reports/macker" />
    <property name="macker.report.xml"    location="${macker.report.dir}/macker-report.xml" />
    <property name="macker.report.html"   location="${macker.report.dir}/macker-report.html" />

    <!-- explain ========================================================= -->
    <target name="explain" description="Usage explanation">
        <echo>
________________________________________________________________________________
Simple standalone usage example of Macker. Which shows how to check your
application for previously defined architectural rules. You can find these
rules in the macker-rules.xml file:
<![CDATA[${build.dir}/conf/quality/macker/macker-rules.xml]]>


Usage:
ant [tasks]

tasks:
  info            Print the explanation of the original basic example.
  explain         Print this informations
  prepare         Create necessary folders and template for macker-rules.xml
                  at the location:
                  ${build.dir}/conf/quality/macker/macker-rules.xml
  compile
  macker
  macker-report   Creates an report at
                  ${build.dir}/reports/macker/macker-report.xml
  clean           Cleanup of all unneccessary previously created files
________________________________________________________________________________
      </echo>
    </target>

    <!-- info ============================================================ -->
    <target name="info">
      <echo>
________________________________________________________________________________
This stupidly simple example disallows references from classes whose names
contain "Print" to any Java APIs.  As with most of these examples, the source
code contains a few violations of the rules, so you can see what such violations
will look like.  Note that Macker picks up several references in this example
that aren't immediately obvious.

With all of these examples, you can:
  * Type "ant" to see macker apply the rules
  * Type "ant -Dmacker.verbose=true" to see some details of what's going on
  * Edit "src/macker.xml" to fool with different rules
  * View an XML report in:
    ${build.dir}/macker-report.xml

Enjoy!
________________________________________________________________________________
        </echo>
    </target>

    <!-- prepare ========================================================= -->
    <target name="prepare" description="Creates the build folder.">
      <mkdir dir="${build.dir}" />
      <mkdir dir="${build.classes.dir}" />

      <path id="build.classpath">
          <fileset dir="${lib.dir}" includes="*.jar" />
          <pathelement location="${macker.jar.file}" />
      </path>
    </target>

    <!-- compile ========================================================= -->
    <target name="compile"
      depends="prepare" description="Compiles the basic example.">
      <javac includeantruntime="false"
          srcdir="${src.dir}"
          destdir="${build.classes.dir}">
          <classpath refid="build.classpath" />
      </javac>
    </target>

    <!-- macker-check ==================================================== -->
    <target name="macker-check">
      <available property="macker.jar.file.exists"
        file="${macker.jar.file}" />
      <available property="macker.rules.file.exists"
        file="${macker.rules.file}" />
    </target>

    <!-- macker ========================================================== -->
    <target name="macker" depends="macker-dependency-resolved,macker-dependency-failure,compile">
      <!-- See the task with name: <macker-ok> -->
    </target>

    <target name="macker-dependency-failure" depends="macker-check,compile"
      unless="macker.rules.file.exists">
      <echo>Macker FAILURE</echo>
      <echo>Please check if you have the macker.jar and the macker-rules.xml</echo>
      <echo>at the right path.</echo>
      <echo>macker.jar path: ${macker.jar.file}</echo>
      <echo>macker-rules.xml path: ${macker.rules.file}</echo>
      <fail/>
    </target>

    <target name="macker-dependency-resolved" depends="macker-check,compile"
      if="macker.rules.file.exists">
      <property name="macker.verbose" value="false" />
      <property name="macker.failOnError" value="false" />

      <mkdir dir="${macker.report.dir}" />

      <!-- Defines the macker ant task.  You need this once per build file. -->
      <!-- The classpath here tells Ant where to look for Macker classes. -->
      <taskdef name="macker"
          classname="net.innig.macker.ant.MackerAntTask"
          classpathref="build.classpath"/>

      <macker verbose="${macker.verbose}" xmlReportFile="${macker.report.xml}" failOnError="${macker.failOnError}">
        <!-- Rules come from this file: -->
        <rules dir="${macker.rules.path}" includes="macker-rules.xml" />

        <!-- Macker will apply those rules to these classes: -->
        <classes dir="${build.classes.dir}">
          <include name="**/*.class" />
        </classes>

        <!-- The primary classes depend on classes in this classpath: -->
        <classpath refid="build.classpath" />
      </macker>
    </target>

    <!-- macker-report =================================================== -->
    <target name="macker-report" depends="macker">
      <!-- Defines the macker-report ant task.  You need this once per build file. -->
      <!-- The classpath here tells Ant where to look for Macker classes. -->
      <taskdef name="macker-report"
          classname="net.innig.macker.ant.MackerReportAntTask"
          classpathref="build.classpath"/>

      <macker-report
          xmlReportfile="${macker.report.xml}"
          outputFile="${macker.report.html}" />

      <echo>Macker report: ${macker.report.html}</echo>
    </target>

    <!-- clean =========================================================== -->
    <target name="clean" description="Removes all build files.">
      <delete dir="${build.classes.dir}" />
      <delete dir="${build.dir}" />
    </target>
</project>
